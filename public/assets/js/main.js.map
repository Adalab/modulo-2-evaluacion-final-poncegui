{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n\n//GLOBAL VARIABLES\nconst input = document.querySelector(\".js_inputUser\");\nconst btnSearch = document.querySelector(\".js_btnSearch\");\nconst imageError = \"https://via.placeholder.com/100x75?text=Ups!+we+are+not+perfect\";\nconst messageError = document.querySelector(\".js_messageError\");\nconst listContainer = document.querySelector(\".js_results\");\nconst listFavDom = document.querySelector(\".js_favorites\");\n\n//ARRAYS\nlet tvSerieslist = [];\nlet fav = [];\n\n//Part #1; FETCH \nfunction handleSearch(ev){\n    ev.preventDefault();\n    const inputUser = input.value;\n    listContainer.innerHTML = \"\";\n\n    fetch(`https://api.jikan.moe/v3/search/anime?q=`+ inputUser)\n    .then(response => response.json())\n    .then((moviesData) => {\n        tvSerieslist = moviesData.results;\n        if (tvSerieslist == undefined) {\n            renderError();\n            input.value=\"\";\n        } else \n        renderAnimeTvShows();    \n    });\n}  \n\n// fail search user\nfunction renderError(){\n    messageError.innerHTML =\"Sorry! not found. Let's try another movie.\";\n}\n\n//RENDER Part #2  *user results & clear list\nfunction renderAnimeTvShows(){\n    listContainer.innerHTML=\"\";\n\n\n    tvSerieslist.forEach(choice => {\n    const replaceImg = choice.image_url.replace(imageError)\n    listContainer.innerHTML +=`<li class=\"js_results js-eachCard\" data-id=\"${choice.mal_id}\"> \n                                <img class=\"movie_img\" src= ${replaceImg}\" alt=\"anime show\"  \n                                <h3 class=\"movie_title\">${choice.title}</h3> </li>`;    \n                                \n                                \n                    \n    })       \n          \n     listenEachCard(); \n\n\n     // Keep favorite class after reset\n     const listUser = document.getElementsByClassName(\"js-eachCard\");\n     const listFav = document.getElementsByClassName(\"js_favorites__childs\");\n\n     for (const eachClassFav  of listFav) {\n       for (const eachClassList of listUser) {\n         if ((eachClassList.dataset.id) === (eachClassFav.dataset.id)) {\n            eachClassList.classList.add(\"js_colors\");\n            eachClassList.classList.remove(\"js-eachCard\");\n         }\n       }\n     }\n}\n\n//Reset search user & fail search\nconst btnReset = document.querySelector(\".js_btnReset\");\nbtnReset.addEventListener(\"click\", (ev) => {\n    ev.preventDefault\n    listContainer.innerHTML=\"\";\n    input.value=\"\";\n    messageError.innerHTML =\"\";   \n})\n\n//RENDER Part #3   *create a favorite list\n// looking for \"click\"\nconst listenEachCard = () => {\n    let cards = document.querySelectorAll(\".js-eachCard\");\n    for (const card of cards){\n        card.addEventListener(\"click\",handleAddCardFav)\n    }   \n}\n\n// Part #3.1 \n// Check if fav is already included & change display colors\nconst handleAddCardFav = (favorite) => {\n \n        const favClickedId = parseInt(favorite.currentTarget.dataset.id)\n        const changeColor = favorite.target.parentElement;\n        changeColor.classList.toggle(\"js_colors\");\n        changeColor.classList.toggle(\"js_results\");\n      \n\n        const lookingClickedObject = tvSerieslist.find(\n            (favoriteId) => favoriteId.mal_id === favClickedId);\n       \n        const selectedFav = fav.find(\n            (eachFav) => eachFav.mal_id === favClickedId);    \n\n\n// Part #3.2\n// Push fav object into fav list & remove if it is unselected on searching list\n\n\n        if (selectedFav === undefined) {\n            fav.push(lookingClickedObject);\n          } else {\n            const removeFavFromList = fav.findIndex(id => id.mal_id === favClickedId);\n            fav.splice(removeFavFromList,1);\n            // listUser.classList.add(\"js-eachCard\");\n          }\n\n        renderFav(fav)\n        setLocalStorageFav(); \n\n        \n};\n\n// Part #3.3 \n// Render fav list by DOM\n\nconst renderFav = () => {     \n    listFavDom.innerHTML = '';\n    \n    Object.values(fav).forEach(favMovie =>{\n        const titleFav = document.createElement(\"li\");\n        titleFav.classList.add(\"js_favorites__title\");\n        const imgFav = document.createElement(\"img\");\n        const btnFav = document.createElement(\"btn\");\n        btnFav.classList.add(\"js_favorites__childs\");\n\n            titleFav.textContent = favMovie.title\n            imgFav.src = favMovie.image_url\n            imgFav.alt = favMovie.title\n            btnFav.textContent = \"x\"\n            btnFav.dataset.id = favMovie.mal_id\n            \n            listFavDom.appendChild(titleFav)\n            listFavDom.appendChild(imgFav)\n            listFavDom.appendChild(btnFav)\n        })\n\n        // BONUS Part #5.2 Reset full list favorites\n        const btnResetFav = document.querySelector(\".js_resetFav\");\n        btnResetFav.addEventListener(\"click\", (ev) => {\n            ev.preventDefault\n            listFavDom.innerHTML=\"\";\n            fav.splice(0, fav.length)\n            setLocalStorageFav();\n        })\n\n        renderAnimeTvShows();\n        listenRemoveFav();      \n}       \n\n// BONUS Part #5.1 Remove fav one by one\nconst listenRemoveFav = () =>{\n    if (fav.length > 0){\n        const btnRemoveFav = document.querySelectorAll(\".js_favorites__childs\");\n        for (const eachBtnRemove of btnRemoveFav)\n        eachBtnRemove.addEventListener(\"click\",handleRemoveFavCard)\n    }\n}\n\nconst handleRemoveFavCard = (remove) => {\n    const removeClickedFav = parseInt(remove.currentTarget.dataset.id)\n    const removeFavFromList = fav.findIndex(id => id.mal_id === removeClickedFav);\n    fav.splice(removeFavFromList,1);\n\n    renderFav(fav)\n    setLocalStorageFav(); \n    renderAnimeTvShows();\n}   \n \n// Part #4; LOCAL STORAGE\n    const setLocalStorageFav = () => {\n        const stringifytvSeriesFav = JSON.stringify(fav);\n        localStorage.setItem(\"fav\", stringifytvSeriesFav); \n    };\n\n    const getLocalstorageFav = () => {\n        const localStorageTvSeriesFav = localStorage.getItem(\"fav\");\n        if (localStorageTvSeriesFav !== null) {\n        fav = JSON.parse(localStorageTvSeriesFav);\n        }\n        renderFav();\n    };\n\n    getLocalstorageFav();\n   \n\n// //LISTENERS\nbtnSearch.addEventListener(\"click\", handleSearch);\n\n\n"]}