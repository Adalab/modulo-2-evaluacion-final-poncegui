{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n\n//GLOBAL VARIABLES\nconst input = document.querySelector(\".js_inputUser\");\nconst btnSearch = document.querySelector(\".js_btnSearch\");\nconst imageError = \"https://via.placeholder.com/100x75?text=Ups!+we+are+not+perfect\";\nconst colors = document.querySelectorAll(\".js-favorite\");\nconst messageError = document.querySelector(\".js-messageError\");\n\n//VARIABLES USED TO RENDER DOM WITH FRAGMENT \nconst templateFavorites = document.getElementById(\"template-favorites\").content\nconst templateCard = document.getElementById(\"template-card\").content\nconst fragmentList = document.createDocumentFragment();\nconst listMovies =document.querySelector(\".js_results\");\nconst listFav =document.querySelector(\".js_favorites\");\n\n//ARRAYS\nlet tvSerieslist = [];\nlet fav = [];\n\n\n//FETCH Part #1\nfunction handleSearch(ev){\n    ev.preventDefault();\n    const inputUser = input.value;\n\n    fetch(`https://api.jikan.moe/v3/search/anime?q=`+ inputUser)\n    .then(response => response.json())\n    .then((moviesData) => {\n        tvSerieslist = moviesData.results;\n        if (tvSerieslist == undefined) {\n            renderError();\n            input.value=\"\";\n            handleSearch(ev);  \n\n        } else \n        renderAnimeTvShows();    \n    });\n}  \n\nfunction renderError(){\n    messageError.innerHTML =\"Sorry! not found. Let's try another movie\";\n}\n\n//RENDER Part #2  *user results & clear list\nfunction renderAnimeTvShows(){\n    listMovies.innerHTML=\"\";\n\n            tvSerieslist.forEach(choice => { \n                    templateCard.querySelector(\"h5\").textContent = choice.title\n                    templateCard.querySelector(\"img\").setAttribute(\"src\", choice.image_url)\n                    templateCard.querySelector(\".js-favorite\").dataset.id = choice.mal_id\n            \n                const clone = templateCard.cloneNode(true)\n                fragmentList.appendChild(clone)\n            })\n\n            listMovies.appendChild(fragmentList)\n            console.log(fragmentList)\n\n            //Clear search user\n            const btnReset = document.querySelector(\".js_btnReset\");\n            btnReset.addEventListener(\"click\", (ev) => {\n                ev.preventDefault\n                listMovies.innerHTML=\"\";\n                input.value=\"\";\n                messageError.innerHTML =\"\";\n                \n               \n            })\n\n}\n\n//RENDER Part #3   *create a favorite list\n// ***Change colors***\nconst favorite = ev => {\n    if(ev.target.classList.contains(\"js-favorite\")){\n    setFavorite(ev.target.parentElement);\n    }\n    const changeColor = ev.target.parentElement;\n    changeColor.classList.toggle(\"js-colors\")\n    ev.stopPropagation() \n}\n\n// ***New object with \"id\" and add it to favorite list***\nconst setFavorite = newObject => {\n    const movieFav = {\n        id: newObject.querySelector(\".js-favorite\").dataset.id,\n        title: newObject.querySelector(\"h5\").textContent,\n        image_url: newObject.querySelector(\"img\").src,        \n    }\n\n// ***New objet is pushed into \"fav\"\n    fav[movieFav] = {...movieFav}\n    renderFav()\n}\n\n// ***Push new objet into fav list\nconst renderFav = () => {\n    // listFav.innerHTML =\"\";\n    Object.values(fav).forEach(movieFav => {\n        templateFavorites.querySelector(\"h5\").textContent = movieFav.title\n        templateFavorites.querySelector(\"img\").src = movieFav.image_url\n        const clone = templateFavorites.cloneNode(true)\n        fragmentList.appendChild(clone)\n    })\n\n    listFav.appendChild(fragmentList)\n    console.log(listFav)\n    \n\n    // BONUS Part #5; Clear full list of favorites\n    const btnRemoveAllFav = document.querySelector(\".js-removeAll\");\n    btnRemoveAllFav.addEventListener(\"click\", () => {\n    listFav.innerHTML =\"\";\n  })\n\n}\n    \n\n// LOCAL STORAGE; Part #4\n  \n    const getLocalstorageFav = () => {\n        const localStorageTvSeriesFav = localStorage.getItem(\"fav\");\n        if (localStorageTvSeriesFav !== null) {\n           fav = JSON.parse(localStorageTvSeriesFav);\n        }\n    };\n\n   \n    getLocalstorageFav();\n\n\n    const setLocalStorageFav = () => {\n        const stringifytvSeriesFav = JSON.stringify(fav);\n        localStorage.setItem(\"fav\", stringifytvSeriesFav);\n    };\n\n    setLocalStorageFav();\n    console.log(fav)\n\n\n\n//LISTENERS\n\nbtnSearch.addEventListener(\"click\", handleSearch);\nlistMovies.addEventListener(\"click\", ev => {\n    favorite(ev)\n   })\n\n"]}